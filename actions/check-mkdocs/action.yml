name: Check mkdocs build
description: Check if mkdocs build is successful. If not, try creating __init__.py files and try again.
author: Kiyoon Kim

inputs:
  requirements-docs-file:
    description: Path to the requirements_docs.txt file
    deprecationMessage: Use `requirements-file` instead
  requirements-file:
    description: Path to the requirements.txt file for building mkdocs
    required: true
    default: deps/lock/x86_64-unknown-linux-gnu/requirements_docs.txt
  src-dir:
    description: Path to the source directory, for generating __init__.py files
    deprecationMessage: Do not use
  pyproject-toml-file:
    description: Path to pyproject.toml to infer the minimum python version
    default: pyproject.toml

runs:
  using: 'composite'
  steps:
    - name: Check deprecated inputs
      shell: bash
      run: |
        if [[ -n "${{ inputs.src-dir }}" ]]; then
          echo "❌ Warning: 'src-dir' input is deprecated."
        fi
    - uses: deargen/workflows/actions/setup-python-and-uv@master
      with:
        pyproject-toml-file: ${{ inputs.pyproject-toml-file }}
    - shell: bash
      run: |
        uv venv
        source .venv/bin/activate

        if [[ -n "${{ inputs.requirements-docs-file }}" ]]; then
          echo "❌ Warning: 'requirements-docs-file' input is deprecated. Use 'requirements-file' instead."
          export requirements_file="${{ inputs.requirements-docs-file }}"
        else
          export requirements_file="${{ inputs.requirements-file }}"
        fi
        uv pip install -r "${requirements_file}"

        set +e  # Do not exit shell on failure

        out=$(mkdocs build 2> stderr.txt)
        exit_code=$?
        err=$(<stderr.txt)

        # Display the raw output in the step
        echo "${out}"
        echo "${err}"

        # Display the Markdown output in the job summary
        { echo "\`\`\`python"; echo "${out}"; echo "${err}"; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"

        if [[ "${exit_code}" -ne 0 ]]; then
          # If the build failed, try to generate the __init__.py file and build again
          uv pip install ruff
          project_dir=$(dirname "${{ inputs.pyproject-toml-file }}")
          python ${{ github.action_path }}/../../scripts/gen_init_py.py "${project_dir}"
          out=$(mkdocs build 2> stderr.txt)
          new_exit_code=$?
          if [[ "${new_exit_code}" -eq 0 ]]; then
            echo 'Tip: the build succeeded after generating __init__.py. Try running `projector gen-init-py`.' >> "$GITHUB_STEP_SUMMARY"
          fi
        fi
        exit ${exit_code}
