name: Check pip compile
description: Detect changes in requirements*.in files that are not compiled yet
author: Kiyoon Kim

inputs:
  pyproject-toml-file:
    description: Path to pyproject.toml file for getting the minimum python version
    required: true
    default: pyproject.toml
  requirements-in-dir:
    description: Directory to search all requirements*.in files
    required: true
    default: deps
  requirements-out-dir:
    description: Directory to save compiled requirements*.txt files
    required: true
    default: deps/lock
  python-platforms:
    description: Platforms to support (comma-separated)
    required: true
    default: x86_64-manylinux_2_28,aarch64-apple-darwin,x86_64-apple-darwin,x86_64-pc-windows-msvc

runs:
  using: 'composite'
  steps:
    - shell: bash
      run: |
        echo "min_python_version=$(python3 ${{ github.action_path }}/../../scripts/get_min_python_version.py "${{ inputs.pyproject-toml-file }}")" >> "$GITHUB_OUTPUT"
        pip3 install uv --break-system-packages
      id: get-python-version
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.get-python-version.outputs.min_python_version }}
    - shell: bash
      name: Generate lockfile and print diff
      run: |
        set +e  # Do not exit shell on failure

        out=$(bash ${{ github.action_path }}/../../scripts/compile_requirements.sh \
          "${{ inputs.requirements-in-dir }}" \
          "${{ inputs.requirements-out-dir }}" \
          "${{ steps.get-python-version.outputs.min_python_version }}" \
          "${{ inputs.python-platforms }}" 2> _stderr.txt)
        exit_code=$?
        err=$(<_stderr.txt)

        if [[ -n "$out" ]]; then
          # Display the raw output in the step
          echo "${out}"
          # Display the Markdown output in the job summary
          { echo "\`\`\`"; echo "${out}"; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
        fi
        if [[ -n "$err" ]]; then
          echo "${err}"
          { echo "\`\`\`"; echo "${err}"; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
        fi

        if [[ $exit_code -eq 0 ]]; then
          # When the script fails, there are changes in requirements that are not compiled yet.
          # Print the suggested changes.
          { echo "\`\`\`diff"; git diff; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

        # When the script fails, it means it does not have anything to compile.
        exit 0
