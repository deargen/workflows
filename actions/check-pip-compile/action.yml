name: Check pip compile
description: Detect changes in requirements*.in files that are not compiled yet
author: Kiyoon Kim

inputs:
  project-dir:
    description: Directory to search pyproject.toml. Default is the root directory.
    required: false
  pyproject-toml-file:
    description: Path to pyproject.toml file for getting the minimum python version
    required: false
    deprecationMessage: Use project-dir instead. It will read the pyproject.toml file in the directory.
  requirements-in-dir:
    description: Directory to search all requirements*.in files
    required: false
    deprecationMessage: Use project-dir instead. It will read the configuration in pyproject.toml.
  requirements-out-dir:
    description: Directory to save compiled requirements*.txt files
    required: false
    deprecationMessage: Use project-dir instead. It will read the configuration in pyproject.toml.
  python-platforms:
    description: Platforms to support (comma-separated)
    required: false
    deprecationMessage: Use project-dir instead. It will read the configuration in pyproject.toml.

runs:
  using: 'composite'
  steps:
    - name: Check deprecated inputs
      shell: bash
      run: |
        if [[ -n "${{ inputs.pyproject-toml-file }}" ]]; then
          echo "The input 'pyproject-toml-file' is deprecated." >> "$GITHUB_STEP_SUMMARY"
        fi
        if [[ -n "${{ inputs.requirements-in-dir }}" ]]; then
          echo "The input 'requirements-in-dir' is deprecated." >> "$GITHUB_STEP_SUMMARY"
        fi
        if [[ -n "${{ inputs.requirements-out-dir }}" ]]; then
          echo "The input 'requirements-out-dir' is deprecated." >> "$GITHUB_STEP_SUMMARY"
        fi
        if [[ -n "${{ inputs.python-platforms }}" ]]; then
          echo "The input 'python-platforms' is deprecated." >> "$GITHUB_STEP_SUMMARY"
        fi
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    - shell: bash
      run: |
        uv tool install ${{ github.action_path }}/../../python-projector
        echo "min_python_version=$(projector get-min-python-version ${{ inputs.project-dir }})" >> "$GITHUB_OUTPUT"
      id: get-python-version
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.get-python-version.outputs.min_python_version }}
    - shell: bash
      name: Generate lockfile and print diff
      run: |
        set +e  # Do not exit shell on failure

        if [[ -n "${{ inputs.project-dir }}" ]]; then
          out=$(projector pip-compile ${{ inputs.project-dir }} 2> _stderr.txt)
        elif [[ -z "${{ inputs.requirements-in-dir }}" ]]; then
          out=$(projector pip-compile 2> _stderr.txt)
        else
          # deprecated inputs
          out=$(bash ${{ github.action_path }}/../../scripts/compile_requirements.sh \
            "${{ inputs.requirements-in-dir }}" \
            "${{ inputs.requirements-out-dir }}" \
            "${{ steps.get-python-version.outputs.min_python_version }}" \
            "${{ inputs.python-platforms }}" 2> _stderr.txt)
        fi
        exit_code=$?
        err=$(<_stderr.txt)

        if [[ -n "$out" ]]; then
          # Display the raw output in the step
          echo "${out}"
          # Display the Markdown output in the job summary
          { echo "\`\`\`"; echo "${out}"; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
        fi
        if [[ -n "$err" ]]; then
          echo "${err}"
          { echo "\`\`\`"; echo "${err}"; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
        fi

        if [[ $exit_code -eq 0 ]]; then
          # When the script fails, there are changes in requirements that are not compiled yet.
          # Print the suggested changes.
          { echo "\`\`\`diff"; git diff; echo "\`\`\`"; } >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

        # When the script fails, it means it does not have anything to compile.
        exit 0
